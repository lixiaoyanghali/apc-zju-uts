/* Auto-generated by genmsg_cpp for file /home/wu/ros_f_ws/sandbox/pr_msgs/srv/AppletCommand.srv */
#ifndef PR_MSGS_SERVICE_APPLETCOMMAND_H
#define PR_MSGS_SERVICE_APPLETCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace pr_msgs
{
template <class ContainerAllocator>
struct AppletCommandRequest_ {
  typedef AppletCommandRequest_<ContainerAllocator> Type;

  AppletCommandRequest_()
  : action_name()
  , target_name()
  , prep_timelimit(0)
  , execution_timelimit(0)
  {
  }

  AppletCommandRequest_(const ContainerAllocator& _alloc)
  : action_name(_alloc)
  , target_name(_alloc)
  , prep_timelimit(0)
  , execution_timelimit(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  action_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  target_name;

  typedef int32_t _prep_timelimit_type;
  int32_t prep_timelimit;

  typedef int32_t _execution_timelimit_type;
  int32_t execution_timelimit;


  typedef boost::shared_ptr< ::pr_msgs::AppletCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::AppletCommandRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AppletCommandRequest
typedef  ::pr_msgs::AppletCommandRequest_<std::allocator<void> > AppletCommandRequest;

typedef boost::shared_ptr< ::pr_msgs::AppletCommandRequest> AppletCommandRequestPtr;
typedef boost::shared_ptr< ::pr_msgs::AppletCommandRequest const> AppletCommandRequestConstPtr;


template <class ContainerAllocator>
struct AppletCommandResponse_ {
  typedef AppletCommandResponse_<ContainerAllocator> Type;

  AppletCommandResponse_()
  : result(0)
  , info()
  {
  }

  AppletCommandResponse_(const ContainerAllocator& _alloc)
  : result(0)
  , info(_alloc)
  {
  }

  typedef uint8_t _result_type;
  uint8_t result;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _info_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  info;

  enum { DONE = 0 };
  enum { UNKNOWN_COMMAND = 1 };
  enum { UNAVAILABLE = 2 };
  enum { TIMEOUT = 3 };
  enum { ERROR = 4 };

  typedef boost::shared_ptr< ::pr_msgs::AppletCommandResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::AppletCommandResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AppletCommandResponse
typedef  ::pr_msgs::AppletCommandResponse_<std::allocator<void> > AppletCommandResponse;

typedef boost::shared_ptr< ::pr_msgs::AppletCommandResponse> AppletCommandResponsePtr;
typedef boost::shared_ptr< ::pr_msgs::AppletCommandResponse const> AppletCommandResponseConstPtr;

struct AppletCommand
{

typedef AppletCommandRequest Request;
typedef AppletCommandResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AppletCommand
} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::AppletCommandRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::AppletCommandRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::AppletCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e67ef5adf1683522d90687d5becf7233";
  }

  static const char* value(const  ::pr_msgs::AppletCommandRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe67ef5adf1683522ULL;
  static const uint64_t static_value2 = 0xd90687d5becf7233ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::AppletCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/AppletCommandRequest";
  }

  static const char* value(const  ::pr_msgs::AppletCommandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::AppletCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string action_name\n\
\n\
string target_name\n\
\n\
int32 prep_timelimit\n\
\n\
int32 execution_timelimit\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::AppletCommandRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::AppletCommandResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::AppletCommandResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::AppletCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e26da08e1081fe0c6d99808a122b6762";
  }

  static const char* value(const  ::pr_msgs::AppletCommandResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe26da08e1081fe0cULL;
  static const uint64_t static_value2 = 0x6d99808a122b6762ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::AppletCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/AppletCommandResponse";
  }

  static const char* value(const  ::pr_msgs::AppletCommandResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::AppletCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 result\n\
string info\n\
\n\
uint8 DONE=0\n\
uint8 UNKNOWN_COMMAND=1\n\
uint8 UNAVAILABLE=2\n\
uint8 TIMEOUT=3\n\
uint8 ERROR=4\n\
\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::AppletCommandResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::AppletCommandRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.action_name);
    stream.next(m.target_name);
    stream.next(m.prep_timelimit);
    stream.next(m.execution_timelimit);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AppletCommandRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::AppletCommandResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.info);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AppletCommandResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<pr_msgs::AppletCommand> {
  static const char* value() 
  {
    return "6f67d009a5b105353f04c370165b4fd2";
  }

  static const char* value(const pr_msgs::AppletCommand&) { return value(); } 
};

template<>
struct DataType<pr_msgs::AppletCommand> {
  static const char* value() 
  {
    return "pr_msgs/AppletCommand";
  }

  static const char* value(const pr_msgs::AppletCommand&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pr_msgs::AppletCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f67d009a5b105353f04c370165b4fd2";
  }

  static const char* value(const pr_msgs::AppletCommandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pr_msgs::AppletCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/AppletCommand";
  }

  static const char* value(const pr_msgs::AppletCommandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pr_msgs::AppletCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f67d009a5b105353f04c370165b4fd2";
  }

  static const char* value(const pr_msgs::AppletCommandResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pr_msgs::AppletCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/AppletCommand";
  }

  static const char* value(const pr_msgs::AppletCommandResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PR_MSGS_SERVICE_APPLETCOMMAND_H

