"""autogenerated by genpy from pr_msgs/OccGrid3D.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class OccGrid3D(genpy.Message):
  _md5sum = "3c71e0896dd3dc42f5341886fcc48fd1"
  _type = "pr_msgs/OccGrid3D"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """#a 3-D grid map, modeled after the OccGrid.msg type
Header header

#resolution of cells [m/side] 
float32 resolution

# num cells in {x,y,z} direction
uint32 num_x_voxels
uint32 num_y_voxels
uint32 num_z_voxels

# exact center of map (always an odd number of voxels in each dimension)
geometry_msgs/Point32 origin

# the map data. 0-100, representing probability: ceil(100*p_occupied-0.5)
# index =  kk * num_y_voxels * num_x_voxels + jj * num_x_voxels + ii
byte[] data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
"""
  __slots__ = ['header','resolution','num_x_voxels','num_y_voxels','num_z_voxels','origin','data']
  _slot_types = ['std_msgs/Header','float32','uint32','uint32','uint32','geometry_msgs/Point32','byte[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,resolution,num_x_voxels,num_y_voxels,num_z_voxels,origin,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OccGrid3D, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.resolution is None:
        self.resolution = 0.
      if self.num_x_voxels is None:
        self.num_x_voxels = 0
      if self.num_y_voxels is None:
        self.num_y_voxels = 0
      if self.num_z_voxels is None:
        self.num_z_voxels = 0
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point32()
      if self.data is None:
        self.data = []
    else:
      self.header = std_msgs.msg.Header()
      self.resolution = 0.
      self.num_x_voxels = 0
      self.num_y_voxels = 0
      self.num_z_voxels = 0
      self.origin = geometry_msgs.msg.Point32()
      self.data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f3I3f.pack(_x.resolution, _x.num_x_voxels, _x.num_y_voxels, _x.num_z_voxels, _x.origin.x, _x.origin.y, _x.origin.z))
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.data))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.resolution, _x.num_x_voxels, _x.num_y_voxels, _x.num_z_voxels, _x.origin.x, _x.origin.y, _x.origin.z,) = _struct_f3I3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.data = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f3I3f.pack(_x.resolution, _x.num_x_voxels, _x.num_y_voxels, _x.num_z_voxels, _x.origin.x, _x.origin.y, _x.origin.z))
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.data.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.resolution, _x.num_x_voxels, _x.num_y_voxels, _x.num_z_voxels, _x.origin.x, _x.origin.y, _x.origin.z,) = _struct_f3I3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_f3I3f = struct.Struct("<f3I3f")
