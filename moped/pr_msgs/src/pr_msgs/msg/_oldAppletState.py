"""autogenerated by genpy from pr_msgs/oldAppletState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pr_msgs.msg

class oldAppletState(genpy.Message):
  _md5sum = "1fe9abd2f3ee03d21319d51ece2576db"
  _type = "pr_msgs/oldAppletState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """pr_msgs/Action[] actions  # the actions that this applet is ready 
                           #   to perform NOW

uint8 state                # the applet state (one of the values below)

int32 last_command_id      # the id number of the last command (good or bad)

string node_name         # name of the node that is sending this message

string info                # any additional human-readable information

uint8 state_idle=0
uint8 state_busy=1
uint8 state_error=2
uint8 state_dying=3


================================================================================
MSG: pr_msgs/Action
string name         # name of this action (e.g. pickup_juice_box)

string target_name  # distinguishes the target of this action from others
                    #  (could be a global object id, world coordinates, etc)

int32 prep_duration   # how long to expect before any movement commences

int32 execution_duration  # how long to expect the movement to take

"""
  # Pseudo-constants
  state_idle = 0
  state_busy = 1
  state_error = 2
  state_dying = 3

  __slots__ = ['actions','state','last_command_id','node_name','info']
  _slot_types = ['pr_msgs/Action[]','uint8','int32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       actions,state,last_command_id,node_name,info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(oldAppletState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.actions is None:
        self.actions = []
      if self.state is None:
        self.state = 0
      if self.last_command_id is None:
        self.last_command_id = 0
      if self.node_name is None:
        self.node_name = ''
      if self.info is None:
        self.info = ''
    else:
      self.actions = []
      self.state = 0
      self.last_command_id = 0
      self.node_name = ''
      self.info = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.actions)
      buff.write(_struct_I.pack(length))
      for val1 in self.actions:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.target_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2i.pack(_x.prep_duration, _x.execution_duration))
      _x = self
      buff.write(_struct_Bi.pack(_x.state, _x.last_command_id))
      _x = self.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.actions is None:
        self.actions = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actions = []
      for i in range(0, length):
        val1 = pr_msgs.msg.Action()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.target_name = str[start:end].decode('utf-8')
        else:
          val1.target_name = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.prep_duration, _x.execution_duration,) = _struct_2i.unpack(str[start:end])
        self.actions.append(val1)
      _x = self
      start = end
      end += 5
      (_x.state, _x.last_command_id,) = _struct_Bi.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_name = str[start:end].decode('utf-8')
      else:
        self.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8')
      else:
        self.info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.actions)
      buff.write(_struct_I.pack(length))
      for val1 in self.actions:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.target_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2i.pack(_x.prep_duration, _x.execution_duration))
      _x = self
      buff.write(_struct_Bi.pack(_x.state, _x.last_command_id))
      _x = self.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.actions is None:
        self.actions = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actions = []
      for i in range(0, length):
        val1 = pr_msgs.msg.Action()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.target_name = str[start:end].decode('utf-8')
        else:
          val1.target_name = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.prep_duration, _x.execution_duration,) = _struct_2i.unpack(str[start:end])
        self.actions.append(val1)
      _x = self
      start = end
      end += 5
      (_x.state, _x.last_command_id,) = _struct_Bi.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_name = str[start:end].decode('utf-8')
      else:
        self.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8')
      else:
        self.info = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i = struct.Struct("<2i")
_struct_Bi = struct.Struct("<Bi")
