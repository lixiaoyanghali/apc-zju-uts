/* Auto-generated by genmsg_cpp for file /home/wu/ros_f_ws/sandbox/pr_msgs/msg/herbFeedback.msg */
#ifndef PR_MSGS_MESSAGE_HERBFEEDBACK_H
#define PR_MSGS_MESSAGE_HERBFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pr_msgs
{
template <class ContainerAllocator>
struct herbFeedback_ {
  typedef herbFeedback_<ContainerAllocator> Type;

  herbFeedback_()
  : status()
  , progress(0.0)
  {
  }

  herbFeedback_(const ContainerAllocator& _alloc)
  : status(_alloc)
  , progress(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;

  typedef float _progress_type;
  float progress;


  typedef boost::shared_ptr< ::pr_msgs::herbFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::herbFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct herbFeedback
typedef  ::pr_msgs::herbFeedback_<std::allocator<void> > herbFeedback;

typedef boost::shared_ptr< ::pr_msgs::herbFeedback> herbFeedbackPtr;
typedef boost::shared_ptr< ::pr_msgs::herbFeedback const> herbFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::herbFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::herbFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::herbFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::herbFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::herbFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ce404b6cabcba81b67a4c8bac81c05d3";
  }

  static const char* value(const  ::pr_msgs::herbFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xce404b6cabcba81bULL;
  static const uint64_t static_value2 = 0x67a4c8bac81c05d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::herbFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/herbFeedback";
  }

  static const char* value(const  ::pr_msgs::herbFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::herbFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Feedback message\n\
\n\
string status\n\
float32 progress\n\
\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::herbFeedback_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::herbFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
    stream.next(m.progress);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct herbFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::herbFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::herbFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "progress: ";
    Printer<float>::stream(s, indent + "  ", v.progress);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_HERBFEEDBACK_H

