/* Auto-generated by genmsg_cpp for file /home/wu/ros_f_ws/sandbox/pr_msgs/msg/oldAppletCommand.msg */
#ifndef PR_MSGS_MESSAGE_OLDAPPLETCOMMAND_H
#define PR_MSGS_MESSAGE_OLDAPPLETCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pr_msgs
{
template <class ContainerAllocator>
struct oldAppletCommand_ {
  typedef oldAppletCommand_<ContainerAllocator> Type;

  oldAppletCommand_()
  : node_name()
  , action_name()
  , target_name()
  , command_id(0)
  , prep_timelimit(0)
  , execution_timelimit(0)
  {
  }

  oldAppletCommand_(const ContainerAllocator& _alloc)
  : node_name(_alloc)
  , action_name(_alloc)
  , target_name(_alloc)
  , command_id(0)
  , prep_timelimit(0)
  , execution_timelimit(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  node_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  action_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  target_name;

  typedef int32_t _command_id_type;
  int32_t command_id;

  typedef int32_t _prep_timelimit_type;
  int32_t prep_timelimit;

  typedef int32_t _execution_timelimit_type;
  int32_t execution_timelimit;


  typedef boost::shared_ptr< ::pr_msgs::oldAppletCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::oldAppletCommand_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct oldAppletCommand
typedef  ::pr_msgs::oldAppletCommand_<std::allocator<void> > oldAppletCommand;

typedef boost::shared_ptr< ::pr_msgs::oldAppletCommand> oldAppletCommandPtr;
typedef boost::shared_ptr< ::pr_msgs::oldAppletCommand const> oldAppletCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::oldAppletCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::oldAppletCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::oldAppletCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::oldAppletCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::oldAppletCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3d5ec065e60aaea41600679f9f3cdd68";
  }

  static const char* value(const  ::pr_msgs::oldAppletCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3d5ec065e60aaea4ULL;
  static const uint64_t static_value2 = 0x1600679f9f3cdd68ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::oldAppletCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/oldAppletCommand";
  }

  static const char* value(const  ::pr_msgs::oldAppletCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::oldAppletCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string node_name       # name of the node to perform the action\n\
\n\
string action_name     # name of the action\n\
\n\
string target_name     # name of the target to act upon\n\
\n\
int32 command_id         # unique identifier for this command\n\
\n\
int32 prep_timelimit     # max time to spend before moving the robot\n\
\n\
int32 execution_timelimit  # max time to spend while moving the robot\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::oldAppletCommand_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::oldAppletCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.node_name);
    stream.next(m.action_name);
    stream.next(m.target_name);
    stream.next(m.command_id);
    stream.next(m.prep_timelimit);
    stream.next(m.execution_timelimit);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct oldAppletCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::oldAppletCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::oldAppletCommand_<ContainerAllocator> & v) 
  {
    s << indent << "node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node_name);
    s << indent << "action_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_name);
    s << indent << "target_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_name);
    s << indent << "command_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command_id);
    s << indent << "prep_timelimit: ";
    Printer<int32_t>::stream(s, indent + "  ", v.prep_timelimit);
    s << indent << "execution_timelimit: ";
    Printer<int32_t>::stream(s, indent + "  ", v.execution_timelimit);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_OLDAPPLETCOMMAND_H

