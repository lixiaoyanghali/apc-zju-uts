/* Auto-generated by genmsg_cpp for file /home/wu/ros_f_ws/sandbox/pr_msgs/msg/HandOff.msg */
#ifndef PR_MSGS_MESSAGE_HANDOFF_H
#define PR_MSGS_MESSAGE_HANDOFF_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"

namespace pr_msgs
{
template <class ContainerAllocator>
struct HandOff_ {
  typedef HandOff_<ContainerAllocator> Type;

  HandOff_()
  : header()
  , point()
  , point_world()
  , offset()
  , status(0)
  , mode(0)
  , object(0)
  {
  }

  HandOff_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , point(_alloc)
  , point_world(_alloc)
  , offset(_alloc)
  , status(0)
  , mode(0)
  , object(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
   ::geometry_msgs::Point_<ContainerAllocator>  point;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_world_type;
   ::geometry_msgs::Point_<ContainerAllocator>  point_world;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _offset_type;
   ::geometry_msgs::Point_<ContainerAllocator>  offset;

  typedef int16_t _status_type;
  int16_t status;

  typedef int16_t _mode_type;
  int16_t mode;

  typedef int16_t _object_type;
  int16_t object;

  enum { status_none = 0 };
  enum { status_handoff = 1 };
  enum { mode_retract = 0 };
  enum { mode_follow = 1 };
  enum { mode_advance = 2 };
  enum { object_none = 0 };
  enum { object_poptarts = 1 };
  enum { object_fuze = 2 };
  enum { object_container = 3 };
  enum { object_unknown = 4 };

  typedef boost::shared_ptr< ::pr_msgs::HandOff_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::HandOff_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HandOff
typedef  ::pr_msgs::HandOff_<std::allocator<void> > HandOff;

typedef boost::shared_ptr< ::pr_msgs::HandOff> HandOffPtr;
typedef boost::shared_ptr< ::pr_msgs::HandOff const> HandOffConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::HandOff_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::HandOff_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::HandOff_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::HandOff_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::HandOff_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8d06d08893b771d81e1543bd706af0bf";
  }

  static const char* value(const  ::pr_msgs::HandOff_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8d06d08893b771d8ULL;
  static const uint64_t static_value2 = 0x1e1543bd706af0bfULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::HandOff_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/HandOff";
  }

  static const char* value(const  ::pr_msgs::HandOff_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::HandOff_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
geometry_msgs/Point point\n\
geometry_msgs/Point point_world\n\
geometry_msgs/Point offset\n\
int16 status\n\
int16 mode\n\
int16 object\n\
\n\
int16 status_none=0\n\
int16 status_handoff=1\n\
\n\
int16 mode_retract=0\n\
int16 mode_follow=1\n\
int16 mode_advance=2\n\
\n\
int16 object_none=0\n\
int16 object_poptarts=1\n\
int16 object_fuze=2\n\
int16 object_container=3\n\
int16 object_unknown=4\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::HandOff_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::pr_msgs::HandOff_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::pr_msgs::HandOff_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::HandOff_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.point);
    stream.next(m.point_world);
    stream.next(m.offset);
    stream.next(m.status);
    stream.next(m.mode);
    stream.next(m.object);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HandOff_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::HandOff_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::HandOff_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "point: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "point_world: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point_world);
    s << indent << "offset: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.offset);
    s << indent << "status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.status);
    s << indent << "mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mode);
    s << indent << "object: ";
    Printer<int16_t>::stream(s, indent + "  ", v.object);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_HANDOFF_H

