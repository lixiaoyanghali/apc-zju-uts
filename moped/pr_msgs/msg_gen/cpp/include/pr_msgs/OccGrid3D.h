/* Auto-generated by genmsg_cpp for file /home/wu/ros_f_ws/sandbox/pr_msgs/msg/OccGrid3D.msg */
#ifndef PR_MSGS_MESSAGE_OCCGRID3D_H
#define PR_MSGS_MESSAGE_OCCGRID3D_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point32.h"

namespace pr_msgs
{
template <class ContainerAllocator>
struct OccGrid3D_ {
  typedef OccGrid3D_<ContainerAllocator> Type;

  OccGrid3D_()
  : header()
  , resolution(0.0)
  , num_x_voxels(0)
  , num_y_voxels(0)
  , num_z_voxels(0)
  , origin()
  , data()
  {
  }

  OccGrid3D_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , resolution(0.0)
  , num_x_voxels(0)
  , num_y_voxels(0)
  , num_z_voxels(0)
  , origin(_alloc)
  , data(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _resolution_type;
  float resolution;

  typedef uint32_t _num_x_voxels_type;
  uint32_t num_x_voxels;

  typedef uint32_t _num_y_voxels_type;
  uint32_t num_y_voxels;

  typedef uint32_t _num_z_voxels_type;
  uint32_t num_z_voxels;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _origin_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  origin;

  typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _data_type;
  std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  data;


  typedef boost::shared_ptr< ::pr_msgs::OccGrid3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::OccGrid3D_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct OccGrid3D
typedef  ::pr_msgs::OccGrid3D_<std::allocator<void> > OccGrid3D;

typedef boost::shared_ptr< ::pr_msgs::OccGrid3D> OccGrid3DPtr;
typedef boost::shared_ptr< ::pr_msgs::OccGrid3D const> OccGrid3DConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::OccGrid3D_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::OccGrid3D_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::OccGrid3D_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::OccGrid3D_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::OccGrid3D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3c71e0896dd3dc42f5341886fcc48fd1";
  }

  static const char* value(const  ::pr_msgs::OccGrid3D_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3c71e0896dd3dc42ULL;
  static const uint64_t static_value2 = 0xf5341886fcc48fd1ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::OccGrid3D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/OccGrid3D";
  }

  static const char* value(const  ::pr_msgs::OccGrid3D_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::OccGrid3D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#a 3-D grid map, modeled after the OccGrid.msg type\n\
Header header\n\
\n\
#resolution of cells [m/side] \n\
float32 resolution\n\
\n\
# num cells in {x,y,z} direction\n\
uint32 num_x_voxels\n\
uint32 num_y_voxels\n\
uint32 num_z_voxels\n\
\n\
# exact center of map (always an odd number of voxels in each dimension)\n\
geometry_msgs/Point32 origin\n\
\n\
# the map data. 0-100, representing probability: ceil(100*p_occupied-0.5)\n\
# index =  kk * num_y_voxels * num_x_voxels + jj * num_x_voxels + ii\n\
byte[] data\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::pr_msgs::OccGrid3D_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::pr_msgs::OccGrid3D_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::pr_msgs::OccGrid3D_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::OccGrid3D_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.resolution);
    stream.next(m.num_x_voxels);
    stream.next(m.num_y_voxels);
    stream.next(m.num_z_voxels);
    stream.next(m.origin);
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct OccGrid3D_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::OccGrid3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::OccGrid3D_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "num_x_voxels: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_x_voxels);
    s << indent << "num_y_voxels: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_y_voxels);
    s << indent << "num_z_voxels: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_z_voxels);
    s << indent << "origin: ";
s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_OCCGRID3D_H

