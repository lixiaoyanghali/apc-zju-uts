/* Auto-generated by genmsg_cpp for file /home/wu/ros_f_ws/sandbox/pr_msgs/msg/Vector3D.msg */
#ifndef PR_MSGS_MESSAGE_VECTOR3D_H
#define PR_MSGS_MESSAGE_VECTOR3D_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pr_msgs
{
template <class ContainerAllocator>
struct Vector3D_ {
  typedef Vector3D_<ContainerAllocator> Type;

  Vector3D_()
  : axis1(0.0)
  , axis2(0.0)
  , axis3(0.0)
  {
  }

  Vector3D_(const ContainerAllocator& _alloc)
  : axis1(0.0)
  , axis2(0.0)
  , axis3(0.0)
  {
  }

  typedef double _axis1_type;
  double axis1;

  typedef double _axis2_type;
  double axis2;

  typedef double _axis3_type;
  double axis3;


  typedef boost::shared_ptr< ::pr_msgs::Vector3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::Vector3D_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Vector3D
typedef  ::pr_msgs::Vector3D_<std::allocator<void> > Vector3D;

typedef boost::shared_ptr< ::pr_msgs::Vector3D> Vector3DPtr;
typedef boost::shared_ptr< ::pr_msgs::Vector3D const> Vector3DConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::Vector3D_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::Vector3D_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::Vector3D_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::Vector3D_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::Vector3D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ebd79d666ce8461ba522577a93648fee";
  }

  static const char* value(const  ::pr_msgs::Vector3D_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xebd79d666ce8461bULL;
  static const uint64_t static_value2 = 0xa522577a93648feeULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::Vector3D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/Vector3D";
  }

  static const char* value(const  ::pr_msgs::Vector3D_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::Vector3D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 axis1\n\
float64 axis2\n\
float64 axis3\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::Vector3D_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pr_msgs::Vector3D_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::Vector3D_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.axis1);
    stream.next(m.axis2);
    stream.next(m.axis3);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Vector3D_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::Vector3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::Vector3D_<ContainerAllocator> & v) 
  {
    s << indent << "axis1: ";
    Printer<double>::stream(s, indent + "  ", v.axis1);
    s << indent << "axis2: ";
    Printer<double>::stream(s, indent + "  ", v.axis2);
    s << indent << "axis3: ";
    Printer<double>::stream(s, indent + "  ", v.axis3);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_VECTOR3D_H

