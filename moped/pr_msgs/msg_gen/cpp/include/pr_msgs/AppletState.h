/* Auto-generated by genmsg_cpp for file /home/wu/ros_f_ws/sandbox/pr_msgs/msg/AppletState.msg */
#ifndef PR_MSGS_MESSAGE_APPLETSTATE_H
#define PR_MSGS_MESSAGE_APPLETSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "pr_msgs/Action.h"

namespace pr_msgs
{
template <class ContainerAllocator>
struct AppletState_ {
  typedef AppletState_<ContainerAllocator> Type;

  AppletState_()
  : cmd_topic_name()
  , actions()
  , state(0)
  , info()
  {
  }

  AppletState_(const ContainerAllocator& _alloc)
  : cmd_topic_name(_alloc)
  , actions(_alloc)
  , state(0)
  , info(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_topic_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  cmd_topic_name;

  typedef std::vector< ::pr_msgs::Action_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr_msgs::Action_<ContainerAllocator> >::other >  _actions_type;
  std::vector< ::pr_msgs::Action_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr_msgs::Action_<ContainerAllocator> >::other >  actions;

  typedef uint8_t _state_type;
  uint8_t state;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _info_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  info;

  enum { state_idle = 0 };
  enum { state_busy = 1 };
  enum { state_error = 2 };
  enum { state_dying = 3 };

  typedef boost::shared_ptr< ::pr_msgs::AppletState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::AppletState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AppletState
typedef  ::pr_msgs::AppletState_<std::allocator<void> > AppletState;

typedef boost::shared_ptr< ::pr_msgs::AppletState> AppletStatePtr;
typedef boost::shared_ptr< ::pr_msgs::AppletState const> AppletStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::AppletState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::AppletState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::AppletState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::AppletState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::AppletState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7c39cb5217576cbaaa8bc739f08abe33";
  }

  static const char* value(const  ::pr_msgs::AppletState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7c39cb5217576cbaULL;
  static const uint64_t static_value2 = 0xaa8bc739f08abe33ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::AppletState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/AppletState";
  }

  static const char* value(const  ::pr_msgs::AppletState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::AppletState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string cmd_topic_name     # The topic name to use when calling \n\
                          # AppletCommand service for this node\n\
\n\
pr_msgs/Action[] actions  # the actions that this applet is ready \n\
                          #   to perform NOW\n\
\n\
uint8 state               # the applet state (one of the values below)\n\
\n\
string info               # any additional human-readable information\n\
\n\
uint8 state_idle=0\n\
uint8 state_busy=1\n\
uint8 state_error=2\n\
uint8 state_dying=3\n\
\n\
\n\
================================================================================\n\
MSG: pr_msgs/Action\n\
string name         # name of this action (e.g. pickup_juice_box)\n\
\n\
string target_name  # distinguishes the target of this action from others\n\
                    #  (could be a global object id, world coordinates, etc)\n\
\n\
int32 prep_duration   # how long to expect before any movement commences\n\
\n\
int32 execution_duration  # how long to expect the movement to take\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::AppletState_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::AppletState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cmd_topic_name);
    stream.next(m.actions);
    stream.next(m.state);
    stream.next(m.info);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AppletState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::AppletState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::AppletState_<ContainerAllocator> & v) 
  {
    s << indent << "cmd_topic_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd_topic_name);
    s << indent << "actions[]" << std::endl;
    for (size_t i = 0; i < v.actions.size(); ++i)
    {
      s << indent << "  actions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pr_msgs::Action_<ContainerAllocator> >::stream(s, indent + "    ", v.actions[i]);
    }
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.info);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_APPLETSTATE_H

