/* Auto-generated by genmsg_cpp for file /home/wu/ros_f_ws/sandbox/pr_msgs/msg/PixelCoordinate.msg */
#ifndef PR_MSGS_MESSAGE_PIXELCOORDINATE_H
#define PR_MSGS_MESSAGE_PIXELCOORDINATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pr_msgs
{
template <class ContainerAllocator>
struct PixelCoordinate_ {
  typedef PixelCoordinate_<ContainerAllocator> Type;

  PixelCoordinate_()
  : x(0)
  , y(0)
  {
  }

  PixelCoordinate_(const ContainerAllocator& _alloc)
  : x(0)
  , y(0)
  {
  }

  typedef int16_t _x_type;
  int16_t x;

  typedef int16_t _y_type;
  int16_t y;


  typedef boost::shared_ptr< ::pr_msgs::PixelCoordinate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::PixelCoordinate_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PixelCoordinate
typedef  ::pr_msgs::PixelCoordinate_<std::allocator<void> > PixelCoordinate;

typedef boost::shared_ptr< ::pr_msgs::PixelCoordinate> PixelCoordinatePtr;
typedef boost::shared_ptr< ::pr_msgs::PixelCoordinate const> PixelCoordinateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::PixelCoordinate_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::PixelCoordinate_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::PixelCoordinate_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::PixelCoordinate_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::PixelCoordinate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6d78a6b8c9650c754bf0432d3d1707c3";
  }

  static const char* value(const  ::pr_msgs::PixelCoordinate_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6d78a6b8c9650c75ULL;
  static const uint64_t static_value2 = 0x4bf0432d3d1707c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::PixelCoordinate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/PixelCoordinate";
  }

  static const char* value(const  ::pr_msgs::PixelCoordinate_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::PixelCoordinate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 x\n\
int16 y\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::PixelCoordinate_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pr_msgs::PixelCoordinate_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::PixelCoordinate_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PixelCoordinate_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::PixelCoordinate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::PixelCoordinate_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_PIXELCOORDINATE_H

