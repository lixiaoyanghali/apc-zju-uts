/* Auto-generated by genmsg_cpp for file /home/wu/ros_f_ws/sandbox/pr_msgs/msg/Trimesh.msg */
#ifndef PR_MSGS_MESSAGE_TRIMESH_H
#define PR_MSGS_MESSAGE_TRIMESH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point32.h"

namespace pr_msgs
{
template <class ContainerAllocator>
struct Trimesh_ {
  typedef Trimesh_<ContainerAllocator> Type;

  Trimesh_()
  : header()
  , name()
  , vertices()
  , vertex_indices()
  , colors()
  , color_indices()
  {
  }

  Trimesh_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , name(_alloc)
  , vertices(_alloc)
  , vertex_indices(_alloc)
  , colors(_alloc)
  , color_indices(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _vertices_type;
  std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  vertices;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _vertex_indices_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  vertex_indices;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _colors_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  colors;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _color_indices_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  color_indices;


  typedef boost::shared_ptr< ::pr_msgs::Trimesh_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::Trimesh_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Trimesh
typedef  ::pr_msgs::Trimesh_<std::allocator<void> > Trimesh;

typedef boost::shared_ptr< ::pr_msgs::Trimesh> TrimeshPtr;
typedef boost::shared_ptr< ::pr_msgs::Trimesh const> TrimeshConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::Trimesh_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::Trimesh_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::Trimesh_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::Trimesh_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::Trimesh_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c4732217043c8a79c8374a3de7386041";
  }

  static const char* value(const  ::pr_msgs::Trimesh_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc4732217043c8a79ULL;
  static const uint64_t static_value2 = 0xc8374a3de7386041ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::Trimesh_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/Trimesh";
  }

  static const char* value(const  ::pr_msgs::Trimesh_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::Trimesh_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
string name\n\
geometry_msgs/Point32[] vertices\n\
uint32[] vertex_indices\n\
uint32[] colors\n\
uint32[] color_indices\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::pr_msgs::Trimesh_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::pr_msgs::Trimesh_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::pr_msgs::Trimesh_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::Trimesh_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.name);
    stream.next(m.vertices);
    stream.next(m.vertex_indices);
    stream.next(m.colors);
    stream.next(m.color_indices);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Trimesh_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::Trimesh_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::Trimesh_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "vertices[]" << std::endl;
    for (size_t i = 0; i < v.vertices.size(); ++i)
    {
      s << indent << "  vertices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.vertices[i]);
    }
    s << indent << "vertex_indices[]" << std::endl;
    for (size_t i = 0; i < v.vertex_indices.size(); ++i)
    {
      s << indent << "  vertex_indices[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.vertex_indices[i]);
    }
    s << indent << "colors[]" << std::endl;
    for (size_t i = 0; i < v.colors.size(); ++i)
    {
      s << indent << "  colors[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.colors[i]);
    }
    s << indent << "color_indices[]" << std::endl;
    for (size_t i = 0; i < v.color_indices.size(); ++i)
    {
      s << indent << "  color_indices[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.color_indices[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_TRIMESH_H

