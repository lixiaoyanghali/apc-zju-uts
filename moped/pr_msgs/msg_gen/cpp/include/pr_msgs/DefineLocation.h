/* Auto-generated by genmsg_cpp for file /home/wu/ros_f_ws/sandbox/pr_msgs/msg/DefineLocation.msg */
#ifndef PR_MSGS_MESSAGE_DEFINELOCATION_H
#define PR_MSGS_MESSAGE_DEFINELOCATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace pr_msgs
{
template <class ContainerAllocator>
struct DefineLocation_ {
  typedef DefineLocation_<ContainerAllocator> Type;

  DefineLocation_()
  : header()
  , name()
  , xx(0.0)
  , yy(0.0)
  , th(0.0)
  , dist_thresh(0.0)
  , angle_thresh(0.0)
  , type(0)
  {
  }

  DefineLocation_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , name(_alloc)
  , xx(0.0)
  , yy(0.0)
  , th(0.0)
  , dist_thresh(0.0)
  , angle_thresh(0.0)
  , type(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef float _xx_type;
  float xx;

  typedef float _yy_type;
  float yy;

  typedef float _th_type;
  float th;

  typedef float _dist_thresh_type;
  float dist_thresh;

  typedef float _angle_thresh_type;
  float angle_thresh;

  typedef uint8_t _type_type;
  uint8_t type;

  enum { type_place = 1 };
  enum { type_thing = 2 };

  typedef boost::shared_ptr< ::pr_msgs::DefineLocation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::DefineLocation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DefineLocation
typedef  ::pr_msgs::DefineLocation_<std::allocator<void> > DefineLocation;

typedef boost::shared_ptr< ::pr_msgs::DefineLocation> DefineLocationPtr;
typedef boost::shared_ptr< ::pr_msgs::DefineLocation const> DefineLocationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::DefineLocation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::DefineLocation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::DefineLocation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::DefineLocation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::DefineLocation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0be26fc27c554ba0d2e3b0713e9ab224";
  }

  static const char* value(const  ::pr_msgs::DefineLocation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0be26fc27c554ba0ULL;
  static const uint64_t static_value2 = 0xd2e3b0713e9ab224ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::DefineLocation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/DefineLocation";
  }

  static const char* value(const  ::pr_msgs::DefineLocation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::DefineLocation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message defines a named location.  Coordinates reference the\n\
# global map.  The robot can be asked to go to locations by their\n\
# name.  How the robot goes to a location depends on its type--a\n\
# place or a thing.  In the latter case, something can be expected\n\
# to occupy the defined coordinates.  However, the robot should get\n\
# as close as possible.\n\
\n\
Header header\n\
\n\
# How the location is known\n\
string name\n\
\n\
# Pose of the location\n\
float32 xx\n\
float32 yy\n\
float32 th\n\
\n\
# Desired precision with which the pose must be attained.\n\
float32 dist_thresh\n\
float32 angle_thresh\n\
\n\
# One of the below types, which identifies how to go to this place.\n\
uint8 type\n\
\n\
uint8 type_place=1	# The pose can be attained by the robot\n\
uint8 type_thing=2	# Something is at this pose; just get close.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::DefineLocation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::pr_msgs::DefineLocation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::pr_msgs::DefineLocation_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::DefineLocation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.name);
    stream.next(m.xx);
    stream.next(m.yy);
    stream.next(m.th);
    stream.next(m.dist_thresh);
    stream.next(m.angle_thresh);
    stream.next(m.type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DefineLocation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::DefineLocation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::DefineLocation_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "xx: ";
    Printer<float>::stream(s, indent + "  ", v.xx);
    s << indent << "yy: ";
    Printer<float>::stream(s, indent + "  ", v.yy);
    s << indent << "th: ";
    Printer<float>::stream(s, indent + "  ", v.th);
    s << indent << "dist_thresh: ";
    Printer<float>::stream(s, indent + "  ", v.dist_thresh);
    s << indent << "angle_thresh: ";
    Printer<float>::stream(s, indent + "  ", v.angle_thresh);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_DEFINELOCATION_H

